# Makefile for ASCII Shape Generator
# Author: FARES

# Compiler
CC = gcc

# Compiler flags
CFLAGS = -Wall -Wextra -std=c99 -pedantic

# Target executable name
TARGET = shapes

# Source files
SOURCES = shapes_program.c shapes_functions.c

# Header files
HEADERS = shapes_header.h

# Object files
OBJECTS = $(SOURCES:.c=.o)

# Default target
all: $(TARGET)

# Build the executable
$(TARGET): $(OBJECTS)
	@echo "Linking $(TARGET)..."
	$(CC) $(CFLAGS) -o $(TARGET) $(OBJECTS)
	@echo "Build successful! Run with: ./$(TARGET)"

# Compile source files to object files
%.o: %.c $(HEADERS)
	@echo "Compiling $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	rm -f $(OBJECTS) $(TARGET)
	@echo "Clean complete!"

# Clean and rebuild
rebuild: clean all

# Run the program
run: $(TARGET)
	./$(TARGET)

# Debug build with additional flags
debug: CFLAGS += -g -DDEBUG
debug: $(TARGET)

# Install (copy to /usr/local/bin - requires sudo)
install: $(TARGET)
	@echo "Installing $(TARGET) to /usr/local/bin..."
	sudo cp $(TARGET) /usr/local/bin/
	@echo "Installation complete! You can now run '$(TARGET)' from anywhere."

# Uninstall
uninstall:
	@echo "Removing $(TARGET) from /usr/local/bin..."
	sudo rm -f /usr/local/bin/$(TARGET)
	@echo "Uninstall complete!"

# Create a release archive
archive:
	@echo "Creating release archive..."
	tar -czf shapes-$(shell date +%Y%m%d).tar.gz *.c *.h Makefile README.md LICENSE
	@echo "Archive created: shapes-$(shell date +%Y%m%d).tar.gz"

# Check for memory leaks (requires valgrind)
memcheck: $(TARGET)
	@echo "Running memory check..."
	valgrind --leak-check=full --show-leak-kinds=all ./$(TARGET)

# Show help
help:
	@echo "ASCII Shape Generator - Makefile Help"
	@echo "====================================="
	@echo "Available targets:"
	@echo "  all       - Build the program (default)"
	@echo "  clean     - Remove build artifacts"
	@echo "  rebuild   - Clean and rebuild"
	@echo "  run       - Build and run the program"
	@echo "  debug     - Build with debug symbols"
	@echo "  install   - Install to system (requires sudo)"
	@echo "  uninstall - Remove from system (requires sudo)"
	@echo "  archive   - Create release archive"
	@echo "  memcheck  - Run with valgrind (requires valgrind)"
	@echo "  help      - Show this help message"

# Declare phony targets
.PHONY: all clean rebuild run debug install uninstall archive memcheck help